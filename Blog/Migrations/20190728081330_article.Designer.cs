// <auto-generated />
using System;
using Blog.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Blog.Migrations
{
    [DbContext(typeof(ArticleContext))]
    [Migration("20190728081330_article")]
    partial class article
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Blog.Models.ArticleModels.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Categories")
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(120)");

                    b.Property<bool>("IsOriginal");

                    b.Property<int>("PageId");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("PageId")
                        .IsUnique();

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Blog.Models.ArticleModels.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<int>("ArticleCount");

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Userid");

                    b.HasKey("Id");

                    b.ToTable("ArticleCategories");
                });

            modelBuilder.Entity("Blog.Models.ArticleModels.ArticleContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<int>("PageId");

                    b.HasKey("Id");

                    b.HasIndex("PageId")
                        .IsUnique();

                    b.ToTable("ArticleContents");
                });

            modelBuilder.Entity("Blog.Models.ArticleModels.ArticleStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Comments");

                    b.Property<int>("Like");

                    b.Property<int>("PageId");

                    b.Property<int>("Reads");

                    b.Property<int>("WordCount");

                    b.HasKey("Id");

                    b.HasIndex("Like");

                    b.HasIndex("PageId")
                        .IsUnique();

                    b.ToTable("ArticleStatistics");
                });

            modelBuilder.Entity("Blog.Models.ArticleModels.CommandPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CommandId");

                    b.Property<int>("PageId");

                    b.HasKey("Id");

                    b.HasIndex("CommandId")
                        .IsUnique();

                    b.ToTable("CommandPages");
                });

            modelBuilder.Entity("Blog.Models.ArticleModels.CommandUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CommandId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CommandId")
                        .IsUnique();

                    b.ToTable("CommandUsers");
                });

            modelBuilder.Entity("Blog.Models.ArticleModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CommentId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsReply");

                    b.Property<int>("Like");

                    b.Property<int>("ReplyComId");

                    b.HasKey("Id");

                    b.HasIndex("CommentId")
                        .IsUnique();

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Blog.Models.ArticleModels.UserArticleAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("TotalArticle");

                    b.Property<int>("TotalComment");

                    b.Property<int>("TotalLike");

                    b.Property<int>("TotalOriginal");

                    b.Property<int>("TotalRead");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserArticleAnalyses");
                });

            modelBuilder.Entity("Blog.Models.ArticleModels.ArticleStatistic", b =>
                {
                    b.HasOne("Blog.Models.ArticleModels.Article", "Article")
                        .WithOne("ArticleStatistic")
                        .HasForeignKey("Blog.Models.ArticleModels.ArticleStatistic", "PageId")
                        .HasPrincipalKey("Blog.Models.ArticleModels.Article", "PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
